// Двоичное сложение двоичного и четверичного числа
// Вход: [двоичное_число] [четверичное_число]
// Выход:  [двоичное_число] [четверичное_число] [двоичное+четверичное]
// умеет убирать ведущие нули

// БЛОК 1
// Перевод четверичного числа в двоичное (в обратном порядке)
// каждый блок включает замену очередной четверичной цифры пробелом, её перевод в двоичный вид (в выходных данных), возвращения к четверичному числу и возвращения четверичной цифры
// ch_4 - состояние выбора следующей цифры в четверичном числе
00, ,<,ch_4
// если следующая цифра в четверичном числе - 0
ch_4,0, ,02
02, ,>,03
03,0,>,03
03,1,>,03
03,2,>,03
03,3,>,03
03, ,>,04  // вошли в выходные данные
04,0,>,04
04,1,>,04
04, ,0,05  // ставим 0
05,0,>,05
05, ,0,06  // ставим 0
06,0,<,06
06,1,<,06
06, ,<,07  // вошли во входные данные
07,0,<,07
07,1,<,07
07,2,<,07
07,3,<,07
07, ,0,08  // вернули 0
08,0,<,ch_4
// если следующая цифра в четверичном числе - 1
ch_4,1, ,09
09, ,>,10
10,0,>,10
10,1,>,10
10,2,>,10
10,3,>,10
10, ,>,11
11,0,>,11
11,1,>,11
11, ,1,12  // ставим 1
12,1,>,13
13, ,0,14  // ставим 0
14,0,<,14
14,1,<,14
14, ,<,15
15,0,<,15
15,1,<,15
15,2,<,15
15,3,<,15
15, ,1,16  // вернули 2
16,1,<,ch_4
// если следующая цифра в четверичном числе - 2
ch_4,2, ,17
17, ,>,18
18,0,>,18
18,1,>,18
18,2,>,18
18,3,>,18
18, ,>,19
19,1,>,19
19,0,>,19
19, ,0,20  // ставим 0
20,0,>,20
20, ,1,21  // ставим 1
21,1,<,21
21,0,<,21
21, ,<,22
22,0,<,22
22,1,<,22
22,2,<,22
22,3,<,22
22, ,2,23  // вернули 2
23,2,<,ch_4
// если следующая цифра в четверичном числе - 3
ch_4,3, ,24
24, ,>,25
25,0,>,25
25,1,>,25
25,2,>,25
25,3,>,25
25, ,>,26
26,1,>,26
26,0,>,26
26, ,1,27  // ставим 1
27,1,>,27
27, ,1,28  // ставим 1
28,1,<,28
28,0,<,28
28, ,<,29
29,0,<,29
29,1,<,29
29,2,<,29
29,3,<,29
29, ,3,30  // вернули 3
30,3,<,ch_4
// если следующей цифры нет, то переходим к следующему блоку
ch_4, ,<,frst_2


// БЛОК 2
// Начиная с первого разряда начать складывать входное двоичное число с новым числом
// Пользуясь преимуществом расширенного алфавита будем заменять 0 двойкой, 1 - тройкой
// ch_2 - состояние выбора следующей цифры в двоичном числе
// frst_2 - состояние первичного выбора
// bck_2 - состояние возврата к двоичному числу и возврат цифры
// frd_2 - состояние прибавления 1 до тех пор, пока не встретится 0
// если первая цифра - 0
frst_2,0,2,31
31,2,>,31
31,1,>,31
31,0,>,31
31, ,>,32  // переход к четверичному числу
32,0,>,32
32,1,>,32
32,2,>,32
32,3,>,32
32, ,>,33  // переход к выходным данным
33,1,3,bck_2  // 0+1=1->3
33,0,2,bck_2  // 0+0=0->2
// если первая цифра - 1
frst_2,1,3,34
34,3,>,34
34,1,>,34
34,0,>,34
34, ,>,35
35,0,>,35
35,1,>,35
35,2,>,35
35,3,>,35
35, ,>,36
36,0,3,bck_2  // 0+1=1->3
36,1,2,frd_2  // 1+1=0->2..1
// возврат к двоичному числу и возвращение двоичной цифры
bck_2,0,<,bck_2
bck_2,1,<,bck_2
bck_2,2,<,bck_2
bck_2,3,<,bck_2
bck_2, ,<,37  // переход к входным данным
37,0,<,37
37,1,<,37
37,2,<,37
37,3,<,37
37, ,<,38
38,1,<,38
38,0,<,38
38,2,0,39  // возврат двоичного числа
38,3,1,39  // во входные данные
39,0,<,ch_2
39,1,<,ch_2
// если следующая цифра - 0
ch_2,0,2,40
40,2,>,40
40,1,>,40
40,0,>,40
40, ,>,41  // переход к четверичному числу
41,0,>,41
41,1,>,41
41,2,>,41
41,3,>,41
41, ,>,42  // переход к выходным данным
42,1,>,42
42,0,>,42
42,2,0,43  // возврат двоичного числа
42,3,1,43  // в выходные данные
43,1,>,43b
43,0,>,43b
43b,1,3,bck_2  // 0+1=1->3
43b,0,2,bck_2  // 0+0=0->2
43b, ,2,bck_2
// если следующая цифра - 1
ch_2,1,3,44
44,3,>,44
44,1,>,44
44,0,>,44
44, ,>,45
45,0,>,45
45,1,>,45
45,2,>,45
45,3,>,45
45, ,>,46
46,1,>,46
46,0,>,46
46,2,0,47  // возврат двоичного числа
46,3,1,47  // в выходные данные
47,0,>,47b
47,1,>,47b
47b,0,3,bck_2  // 0+1=1->3
47b,1,2,frd_2  // 1+1=0->2..1
47b, ,3,bck_2
// если следующей цифры нет, то переходим в конец выходных данных и переходим к следующему блоку
ch_2, ,>,48
48,1,>,48
48,0,>,48
48, ,>,49
49,0,>,49
49,1,>,49
49,2,>,49
49,3,>,49
49, ,>,50
50,1,>,50
50,0,>,50
50,2,0,50
50,3,1,50
50, ,<,del0
// если при разрядном суммировании вынеслась 1
frd_2,2,>,51
51,0,1,bck_2
51, ,1,bck_2
51,1,0,52
52,0,>,51


// БЛОК 3
// избавляемся от ведущих 0
// del0, del01 - удаляют нули, пока не встретят 1, после чего переходят к следующему блоку
// если слово в выходных данных состояло только из нулей, то должен остаться один ноль
del0, ,>,pst0  
pst0, ,0,endl  // результат сложения - 0. сразу завершаем работу
del0,0, ,del01
del01, ,<,del0
del0,1,=,first_c


// БЛОК 4
// отзеркалим результат.
// параметры:
// храним цифру для возвращения слева;
// тащим цифру для вставки;
// в какую сторону тащим цифру.
// first_c - первичное перемещение справа налево
// c0t0r, c0t1r, c1t0r, c1t0r, c0t0l, c0t1l, c1t0l, c1t0l
// c_ - что храним, t_ - что тащим, r/l - в какую сторону тащим
// endl - перейти в конец выходных данных для завершения работы
first_c,1, ,56
56, ,<,57
57,1,<,57
57,0,<,57
57, ,>,58
58,0, ,c1t0r
58,1, ,c1t1r
58, ,1,endl

// c0t0r начинаем с пробела, где была цифра, которую взяли
c0t0r, ,>,59
59,1,>,59
59,0,>,59
59, ,0,60
60,0,<,61
61,1, ,c0t1l
61,0, ,c0t0l
61, ,0,endl
// c0t1r начинаем с пробела, где была цифра, которую взяли
c0t1r, ,>,62
62,1,>,62
62,0,>,62
62, ,1,63
63,1,<,64
64,1, ,c0t1l
64,0, ,c0t0l
64, ,0,endl
// c1t0r начинаем с пробела, где была цифра, которую взяли
c1t0r, ,>,65
65,1,>,65
65,0,>,65
65, ,0,66
66,0,<,67
67,1, ,c1t1l
67,0, ,c1t0l
67, ,1,endl
// c1t1r начинаем с пробела, где была цифра, которую взяли
c1t1r, ,>,68
68,1,>,68
68,0,>,68
68, ,1,69
69,1,<,70
70,1, ,c1t1l
70,0, ,c1t0l
70, ,1,endl

// c0t0l начинаем с пробела, где была цифра, которую взяли
c0t0l, ,<,71
71,1,<,71
71,0,<,71
71, ,0,72  // вставляем то, что всё это время хранили
72,0,>,73
73,1, ,c0t1r
73,0, ,c0t0r
73, ,0,endl
// c0t1l начинаем с пробела, где была цифра, которую взяли
c0t1l, ,<,74
74,1,<,74
74,0,<,74
74, ,0,75  // вставляем то, что всё это время хранили
75,0,>,76
76,1, ,c1t1r
76,0, ,c1t0r
76, ,1,endl
// c1t0l начинаем с пробела, где была цифра, которую взяли
c1t0l, ,<,77
77,1,<,77
77,0,<,77
77, ,1,78  // вставляем то, что всё это время хранили
78,1,>,79
79,1, ,c0t1r
79,0, ,c0t0r
79, ,0,endl
// c1t1l начинаем с пробела, где была цифра, которую взяли
c1t1l, ,<,80
80,1,<,80
80,0,<,80
80, ,1,81  // вставляем то, что всё это время хранили
81,1,>,82
82,1, ,c1t1r
82,0, ,c1t0r
82, ,1,endl
// endl - переходим в конец выходных данных и завершаем работу
endl,1,>,endl
endl,0,>,endl
endl, ,=,end
end, ,#,end
